setwd("E:\\R\books\\ModernOptimizationWithR\\code\\Chapter2")
setwd("E:\\R\\books\\ModernOptimizationWithR\\code\\Chapter2")
source("functions.R") # load the code
x = 1:5 # show the factorial of 1:5
cat(sapply(x, fact), "\n")
m = matrix(ncol = 5, nrow = 2)
m[1,] = c(1, 1, 1, 1, 1) # very cheap bags
m[2,] = c(414, 404, 408, 413, 395) # optimum
# show profit for both price setups:
y = apply(m, 1, profit);
print(y)
cat("class of profit is:", class(profit), "\n") # function
x = c(414.1, 404.2, 408.3, 413.2, 395.0)
y = profit(x);
cat("maximum profit:", y, "\n")
cat("x is not changed:", x, "\n")
cat("cost(x=", x, ")=", cost(x), "\n")
cat("sales(x=", x, ")=", sales(round(x)), "\n")
x = c(414, 404);
# sales for 2 bags:
cat("sales(x=", x, ")=", sales(x), "\n")
cat("sales(x,A=1000,m=c(2,1.75))=", sales(x, 1000, m = c(2, 1.75)), "\n")
# show 3! :
x = 3;
cat("fact(", x, ")=", fact(x), "\n")
fsearch = function(search, FUN, type = "min", ...) {
    x = apply(search, 1, FUN, ...) # run FUN over all search rows
    ib = switch(type, min = which.min(x), max = which.max(x))
    return(list(index = ib, sol = search[ib,], eval = x[ib]))
}
dfsearch = function(l = 1, b = 1, domain, FUN, type = "min", D = length(domain),
                  x = rep(NA, D),
                  bcur = switch(type, min = list(sol = NULL, eval = Inf),
                                   max = list(sol = NULL, eval = -Inf)),
                  ...) {
    if ((l - 1) == D) # "leave" with solution x to be tested:
        {
        f = FUN(x, ...);
        fb = bcur$eval
        ib = switch(type, min = which.min(c(fb, f)),
                      max = which.max(c(fb, f)))
        if (ib == 1) return(bcur) else return(list(sol = x, eval = f))
        }
    else # go through sub branches
        {
        for (j in 1:length(domain[[l]])) {
            x[l] = domain[[l]][j]
            bcur = dfsearch(l + 1, j, domain, FUN, type, D = D,
                          x = x, bcur = bcur, ...)
        }
        return(bcur)
    }
}
